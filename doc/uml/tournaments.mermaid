classDiagram
    Tournament "1" *-- "1..4" Player
    Tournament "1" *-- "1..*" Match
    Tournament "1" *-- "1" TournamentState
    Match "1" *-- "2" Player
    Match "1" *-- "1" MatchResult
    Player "1" *-- "*" Score
    
    class Tournament {
        -String tournamentId
        -String name
        -DateTime startTime
        -DateTime endTime
        -TournamentState state
        -Player[] players
        -Match[] matches
        +createTournament(name: String)
        +joinTournament(playerId: String)
        +startTournament()
        +getTournamentStatus()
        +getCurrentStandings()
        +isComplete(): boolean
        +getWinner(): Player
    }

    class TournamentState {
        <<enumeration>>
        CREATED
        WAITING_FOR_PLAYERS
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }

    class Player {
        -String playerId
        -String username
        -PlayerStatus status
        -Score[] scores
        +joinTournament(tournamentId: String)
        +leaveTournament()
        +getCurrentScore(): int
        +updateStatus(status: PlayerStatus)
    }

    class PlayerStatus {
        <<enumeration>>
        WAITING
        READY
        PLAYING
        FINISHED
        DISCONNECTED
    }

    class Match {
        -String matchId
        -Player player1
        -Player player2
        -DateTime startTime
        -MatchResult result
        -MatchState state
        +startMatch()
        +submitMove(playerId: String, move: Move)
        +endMatch()
        +getMatchResult(): MatchResult
    }

    class MatchState {
        <<enumeration>>
        SCHEDULED
        IN_PROGRESS
        COMPLETED
        CANCELLED
    }

    class MatchResult {
        -Player winner
        -Player loser
        -int winnerScore
        -int loserScore
        -DateTime completedAt
        +getWinner(): Player
        +getMatchStatistics()
    }

    class Score {
        -int points
        -int wins
        -int losses
        -int draws
        +updateScore(points: int)
        +calculateTotalPoints(): int
    }

    class TournamentAPI {
        +createTournament(name: String): Tournament
        +getTournament(tournamentId: String): Tournament
        +listActiveTournaments(): Tournament[]
        +joinTournament(tournamentId: String, playerId: String)
        +startMatch(matchId: String)
        +submitMatchResult(matchId: String, result: MatchResult)
        +getTournamentResults(tournamentId: String): TournamentResult
    }
